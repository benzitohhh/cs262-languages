Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    OROR
    TIMES
    NUMBER
    STRING
    TRUE
    MINUS
    LE
    LT
    PLUS
    EQUALEQUAL
    GT
    DIVIDE
    GE
    ANDAND
    FALSE
    NOT
    MOD

Grammar

Rule 0     S' -> js
Rule 1     js -> element js
Rule 2     js -> <empty>
Rule 3     element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 4     element -> stmt SEMICOLON
Rule 5     optparams -> <empty>
Rule 6     optparams -> params
Rule 7     params -> IDENTIFIER COMMA params
Rule 8     params -> IDENTIFIER
Rule 9     compoundstmt -> LBRACE statements RBRACE
Rule 10    statements -> stmt SEMICOLON statements
Rule 11    statements -> <empty>
Rule 12    stmt -> IF exp compoundstmt
Rule 13    stmt -> IF exp compoundstmt ELSE compoundstmt
Rule 14    stmt -> IDENTIFIER EQUAL exp
Rule 15    stmt -> RETURN exp
Rule 16    stmt -> VAR IDENTIFIER EQUAL exp
Rule 17    stmt -> exp
Rule 18    exp -> IDENTIFIER

Terminals, with rules where they appear

ANDAND               : 
COMMA                : 7
DIVIDE               : 
ELSE                 : 13
EQUAL                : 14 16
EQUALEQUAL           : 
FALSE                : 
FUNCTION             : 3
GE                   : 
GT                   : 
IDENTIFIER           : 3 7 8 14 16 18
IF                   : 12 13
LBRACE               : 9
LE                   : 
LPAREN               : 3
LT                   : 
MINUS                : 
MOD                  : 
NOT                  : 
NUMBER               : 
OROR                 : 
PLUS                 : 
RBRACE               : 9
RETURN               : 15
RPAREN               : 3
SEMICOLON            : 4 10
STRING               : 
TIMES                : 
TRUE                 : 
VAR                  : 16
error                : 

Nonterminals, with rules where they appear

compoundstmt         : 3 12 13 13
element              : 1
exp                  : 12 13 14 15 16 17
js                   : 1 0
optparams            : 3
params               : 6 7
statements           : 9 10
stmt                 : 4 10

Parsing method: LALR

state 0

    (0) S' -> . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 1
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 8
    RETURN          shift and go to state 7
    VAR             shift and go to state 6

    stmt                           shift and go to state 5
    element                        shift and go to state 4
    exp                            shift and go to state 2
    js                             shift and go to state 3

state 1

    (3) element -> FUNCTION . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 10


state 2

    (17) stmt -> exp .

    SEMICOLON       reduce using rule 17 (stmt -> exp .)


state 3

    (0) S' -> js .



state 4

    (1) js -> element . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 1
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 8
    RETURN          shift and go to state 7
    VAR             shift and go to state 6

    stmt                           shift and go to state 5
    js                             shift and go to state 11
    exp                            shift and go to state 2
    element                        shift and go to state 4

state 5

    (4) element -> stmt . SEMICOLON

    SEMICOLON       shift and go to state 12


state 6

    (16) stmt -> VAR . IDENTIFIER EQUAL exp

    IDENTIFIER      shift and go to state 13


state 7

    (15) stmt -> RETURN . exp
    (18) exp -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 15

state 8

    (14) stmt -> IDENTIFIER . EQUAL exp
    (18) exp -> IDENTIFIER .

    EQUAL           shift and go to state 16
    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)


state 9

    (12) stmt -> IF . exp compoundstmt
    (13) stmt -> IF . exp compoundstmt ELSE compoundstmt
    (18) exp -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 17

state 10

    (3) element -> FUNCTION IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 18


state 11

    (1) js -> element js .

    $end            reduce using rule 1 (js -> element js .)


state 12

    (4) element -> stmt SEMICOLON .

    FUNCTION        reduce using rule 4 (element -> stmt SEMICOLON .)
    IF              reduce using rule 4 (element -> stmt SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (element -> stmt SEMICOLON .)
    RETURN          reduce using rule 4 (element -> stmt SEMICOLON .)
    VAR             reduce using rule 4 (element -> stmt SEMICOLON .)
    $end            reduce using rule 4 (element -> stmt SEMICOLON .)


state 13

    (16) stmt -> VAR IDENTIFIER . EQUAL exp

    EQUAL           shift and go to state 19


state 14

    (18) exp -> IDENTIFIER .

    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)
    LBRACE          reduce using rule 18 (exp -> IDENTIFIER .)


state 15

    (15) stmt -> RETURN exp .

    SEMICOLON       reduce using rule 15 (stmt -> RETURN exp .)


state 16

    (14) stmt -> IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 20

state 17

    (12) stmt -> IF exp . compoundstmt
    (13) stmt -> IF exp . compoundstmt ELSE compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 21

    compoundstmt                   shift and go to state 22

state 18

    (3) element -> FUNCTION IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (5) optparams -> .
    (6) optparams -> . params
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    RPAREN          reduce using rule 5 (optparams -> .)
    IDENTIFIER      shift and go to state 24

    params                         shift and go to state 23
    optparams                      shift and go to state 25

state 19

    (16) stmt -> VAR IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER

    IDENTIFIER      shift and go to state 14

    exp                            shift and go to state 26

state 20

    (14) stmt -> IDENTIFIER EQUAL exp .

    SEMICOLON       reduce using rule 14 (stmt -> IDENTIFIER EQUAL exp .)


state 21

    (9) compoundstmt -> LBRACE . statements RBRACE
    (10) statements -> . stmt SEMICOLON statements
    (11) statements -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER

    RBRACE          reduce using rule 11 (statements -> .)
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 8
    RETURN          shift and go to state 7
    VAR             shift and go to state 6

    statements                     shift and go to state 27
    exp                            shift and go to state 2
    stmt                           shift and go to state 28

state 22

    (12) stmt -> IF exp compoundstmt .
    (13) stmt -> IF exp compoundstmt . ELSE compoundstmt

    SEMICOLON       reduce using rule 12 (stmt -> IF exp compoundstmt .)
    ELSE            shift and go to state 29


state 23

    (6) optparams -> params .

    RPAREN          reduce using rule 6 (optparams -> params .)


state 24

    (7) params -> IDENTIFIER . COMMA params
    (8) params -> IDENTIFIER .

    COMMA           shift and go to state 30
    RPAREN          reduce using rule 8 (params -> IDENTIFIER .)


state 25

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 31


state 26

    (16) stmt -> VAR IDENTIFIER EQUAL exp .

    SEMICOLON       reduce using rule 16 (stmt -> VAR IDENTIFIER EQUAL exp .)


state 27

    (9) compoundstmt -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 32


state 28

    (10) statements -> stmt . SEMICOLON statements

    SEMICOLON       shift and go to state 33


state 29

    (13) stmt -> IF exp compoundstmt ELSE . compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 21

    compoundstmt                   shift and go to state 34

state 30

    (7) params -> IDENTIFIER COMMA . params
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    IDENTIFIER      shift and go to state 24

    params                         shift and go to state 35

state 31

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (9) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 21

    compoundstmt                   shift and go to state 36

state 32

    (9) compoundstmt -> LBRACE statements RBRACE .

    SEMICOLON       reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    IF              reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    VAR             reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    $end            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 9 (compoundstmt -> LBRACE statements RBRACE .)


state 33

    (10) statements -> stmt SEMICOLON . statements
    (10) statements -> . stmt SEMICOLON statements
    (11) statements -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER

    RBRACE          reduce using rule 11 (statements -> .)
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 8
    RETURN          shift and go to state 7
    VAR             shift and go to state 6

    statements                     shift and go to state 37
    exp                            shift and go to state 2
    stmt                           shift and go to state 28

state 34

    (13) stmt -> IF exp compoundstmt ELSE compoundstmt .

    SEMICOLON       reduce using rule 13 (stmt -> IF exp compoundstmt ELSE compoundstmt .)


state 35

    (7) params -> IDENTIFIER COMMA params .

    RPAREN          reduce using rule 7 (params -> IDENTIFIER COMMA params .)


state 36

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    FUNCTION        reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    VAR             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)


state 37

    (10) statements -> stmt SEMICOLON statements .

    RBRACE          reduce using rule 10 (statements -> stmt SEMICOLON statements .)

